schema danswer_chunk {
    document danswer_chunk {
        # Not to be confused with the UUID generated for this chunk which is called documentid by default
        field document_id type string {
            indexing: summary | attribute
        }
        field chunk_id type int {
            indexing: summary | attribute
        }
        field blurb type string {
            indexing: summary | attribute
        }
        # Can separate out title in the future and give heavier bm-25 weighting
        # Need to consider that not every doc has a separable title (ie. slack message)
        # Set summary options to enable bolding
        field content type string {
            indexing: summary | index
            match {
                gram
                gram-size: 3
            }
            index: enable-bm25
        }
        # duplication of `content` is far from ideal, but is needed for 
        # non-gram based highlighting for now. If the capability to re-use a 
        # single field to do both is added, `content_summary` should be removed
        field content_summary type string {
            indexing: summary | index
            summary: dynamic
        }
        # https://docs.vespa.ai/en/attributes.html potential enum store for speed, but probably not worth it
        field source_type type string {
            indexing: summary | attribute
        }
        # Can also index links https://docs.vespa.ai/en/reference/schema-reference.html#attribute
        # URL type matching
        field source_links type string {
            indexing: summary | attribute
        }
        # displayed in the UI as the main identifier for the doc
        field semantic_identifier type string {
            indexing: summary | attribute
        }
        # this is used when computing best matches based on the title of the document
        # may not always match the `semantic_identifier` e.g. for Slack docs the 
        # `semantic_identifier` will be the channel name, but the `title` will be empty
        field title type string {
            indexing: summary | index
            match {
                gram
                gram-size: 3
            }
            index: enable-bm25
        }
        field section_continuation type bool {
            indexing: summary | attribute
        }
        # Technically this one should be int, but can't change without causing breaks to existing index
        field boost type float {
            indexing: summary | attribute
        }
        field hidden type bool {
            indexing: summary | attribute
        }
        field metadata type string {
            indexing: summary | attribute
        }
        field embeddings type tensor<float>(t{},x[384]) {
            indexing: attribute
            attribute {
                distance-metric: angular
            }
        }
        field doc_updated_at type int {
            indexing: summary | attribute
        }
        field primary_owners type array<string> {
            indexing : summary | attribute
        }
        field secondary_owners type array<string> {
            indexing : summary | attribute
        }
        field access_control_list type weightedset<string> {
            indexing: summary | attribute
            attribute: fast-search
        }
        field document_sets type weightedset<string> {
            indexing: summary | attribute
            attribute: fast-search
        }
    }

    fieldset default {
        fields: content, title
    }

    rank-profile default_rank {
        inputs {
            query(decay_factor) float
        }

        function inline document_boost() {
            # 0.5 to 2x score: piecewise sigmoid function stretched out by factor of 3
            # meaning requires 3x the number of feedback votes to have default sigmoid effect
            expression: if(attribute(boost) < 0, 0.5 + (1 / (1 + exp(-attribute(boost) / 3))), 2 / (1 + exp(-attribute(boost) / 3)))
        }

        function inline document_age() {
            # Time in years (91.3 days ~= 3 Months ~= 1 fiscal quarter if no age found)
            expression: max(if(isNan(attribute(doc_updated_at)) == 1, 7890000, now() - attribute(doc_updated_at)) / 31536000, 0)
        }

        function inline recency_bias() {
            # Cap the loss at 50% score reduction
            expression: max(1 / (1 + query(decay_factor) * document_age), 0.5)
        }

        match-features: recency_bias
    }

    rank-profile keyword_search inherits default, default_rank {
        first-phase {
            expression: bm25(content) * document_boost * recency_bias
        }

        match-features: recency_bias document_boost bm25(content)
    }

    rank-profile semantic_search inherits default, default_rank {
        inputs {
            query(query_embedding) tensor<float>(x[384])
        }

        first-phase {
            # Cannot do boost with the chosen embedding model because of high default similarity
            # This depends on the embedding model chosen
            expression: closeness(field, embeddings)
        }

        match-features: recency_bias document_boost closest(embeddings)
    }

    rank-profile hybrid_search inherits default, default_rank {
        inputs {
            query(query_embedding) tensor<float>(x[384])
        }

        first-phase {
            expression: closeness(field, embeddings)
        }

        global-phase {
            expression: (normalize_linear(closeness(field, embeddings)) + normalize_linear(bm25(content))) / 2 * document_boost * recency_bias
            rerank-count: 250
        }

        # Cannot pass normalize_linear features in match-features
        match-features: recency_bias document_boost closest(embeddings)
    }

    # used when searching from the admin UI for a specific doc to hide / boost
    rank-profile admin_search inherits default, default_rank {
        first-phase {
            expression: bm25(content) + (5 * bm25(title))
        }
    }
}
